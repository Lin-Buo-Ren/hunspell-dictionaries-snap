%YAML 1.2
---
# Snapcraft Recipe for Hunspell Dictionaries
# ------------------------------
# This file is in the YAML data serialization format:
# http://yaml.org
# For the spec. of writing this file refer the following documentation:
# * Snapcraft.yaml reference
#   https://forum.snapcraft.io/t/snapcraft-yaml-reference/4276
# * The snapcraft syntax
#   https://docs.snapcraft.io/build-snaps/syntax
# * Snap Docs
#   https://snapdocs.labix.org
# * Latest doc topics in the Snapcraft Forum
#   https://forum.snapcraft.io/c/doc
# For support refer to the snapcraft section in the Snapcraft Forum:
# https://forum.snapcraft.io/c/snapcraft

name: hunspell-dictionaries
summary: Dictionaries for the most popular spellchecking library
description: |
  This is a content-shared snap for snaps that depend on the Hunspell spellchecking dictionaries.

  Refer "The content interface - doc - snapcraft.io" topic for information of using this snap:
  https://forum.snapcraft.io/t/the-content-interface/1074/1

version: determined-by-version-script
version-script: ./snap/utilities/set-snap-version.bash

confinement: devmode # use 'strict' once you have the right plugs and slots
grade: devel
icon: snap/gui/icon.png

apps:
  # If the my-app-name is identical with the my-awesome-app it can be directly run
  # with `my-awesome-app` or `snap run my-awesome-app`, otherwise it can only be run
  # via `snap run my-awesome-app.my-app-name` in the terminal.
  my-app-name:
    command: my-awesome-app-launch
    desktop: share/applications/my-awesome-app.desktop

    # Refer the following documentation for asserting interface plugs and slots in a security confined snap:
    # Interfaces - doc - snapcraft.io
    # https://forum.snapcraft.io/t/interfaces/6154
    # Non-A/C: Non-autoconnect interface
    plugs:
    # For snaps with a graphical user interface:
    - desktop
    - desktop-legacy
    - x11
    - unity7
    - wayland

    # Storage access
    #- home
    #- removable-media # Non-A/C

    #slots:

# Run `snapcraft help sources` for supported keywords on pulling a part's source ingredients
# Run `snapcraft plugins` for supported build helper plugins
# Run `snapcraft help plugins` for supported keywords on building a part
# For `override-*` scriptlets used to modify behavior of certain part's lifecycle phase, check out:
# https://forum.snapcraft.io/t/scriptlets/4892
parts:
  # Assets from the snap packaging, refer each READMEs under the `snap` folder for more information
  assets:
    source: snap
    source-type: local
    plugin: nil

    override-build: |
      set \
        -o errexit \
        -o nounset

      ./utilities/install-assets.bash
    prime:
    - -utilities
    - -patches

  # Optional auxiliary part for displaying simple dialogs for better user experience, using Yet Another Dialog
  yad:
    after:
    - desktop-gtk3

    plugin: nil
    stage-packages:
    - yad

  my-app-part:
    after:
    - assets

    #source:
    #source-type:
    #source-tag:
    #source-depth:

    plugin: nil

    override-stage: |
      set \
        -o errexit \
        -o nounset

      snapcraftctl stage

      utilities/patch-desktop-entries.bash
